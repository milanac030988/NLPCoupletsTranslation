from signal import *
from selenium import webdriver as webdriver
from selenium.webdriver.chrome.service import Service as Service
from typing import Any

class LOG_LEVEL:
    INFO: int
    DEBUG: int
    ERROR: int

class FakeChatGPTAPI:
    SCRIPT_DIR: str
    INI_FILE_PATH: str
    LOG_LEVEL_MAP: Any
    user_data_dir: Any
    profile_directory: Any
    log_level: Any
    driver_path: Any
    url: Any
    wait_time: Any
    use_chatgpt4o: Any
    cleanup_context: Any
    require_manual_login: Any
    context_content: Any
    headless_mode: Any
    cookies_path: Any
    def __init__(self, config_path: str = ...) -> None: ...
    def log_infor(self, log_msg, level=...) -> None: ...
    @classmethod
    def cleanup_all(cls) -> None: ...
    is_context_created: bool
    driver: Any
    use_4o: bool
    prompt_text_area: Any
    def initialize(self) -> None: ...
    @classmethod
    def normalize_path(cls, path): ...
    @classmethod
    def kill_chrome(cls, user_data_dir) -> None: ...
    def kill_chrome_processes(self) -> None: ...
    def get_user_dir(self): ...
    def reset(self) -> None: ...
    def quit(self) -> None: ...
    def __del__(self) -> None: ...
    def is_login(self) -> bool: ...
    def manual_login(self) -> None: ...
    def delete_context(self) -> None: ...
    def check_chatgpt4o(self): ...
    send_button: Any
    def refresh(self) -> None: ...
    def upload_file(self, file_paths): ...
    def check_conditions(self, present_css, absent_xpath, retries: int = ...): ...
    def send_request(self, request: str) -> str: ...
    def click_regen(self) -> None: ...

def extract_json(text: str) -> dict: ...
def signal_handler(sig, frame, obj) -> None: ...
